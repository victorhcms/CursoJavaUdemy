***OPERADORES COMPARATIVOS***

Operador / Significado
>  / maior
<  / menor
>= / maior ou igual
<= / menor ou igual
== / igual
!= / diferente

**OPERADORES LÓGICOS**
Operador / Significado
&& / E
|| / OU
! / NÃO

***OPERADORES ARITMÉDICOS***
Operador / Significado
+ / adição
- / subtração
* / multiplicação
(/) / divisão
% / resto da divisão ("mod")

***TIPOS PRIMITIVOS***
Descrição / Tipo
byte ->
short ->    tipos numéricos inteiro
int ->
long ->

float ->
double -> tipos numéricos com ponto flutuante

char -> caractere unicode
boolean -> valor verdade
String -> cadeia de caracteres

**ESTRUTURA IF-ELSE**

***ESTRUTURA SWITCH-CASE***

switch ( expressão ) {
case valor1:
comando1
comando2
break;
case valor2:
comando3
comando4
break;
default:
comando5
comando6
break;
}

***ESTRUTURAS REPETITIVAS***

(while - Sintaxe)

while ( condição ) {
comando 1
comando 2
}

(for - Sintaxe)

ínicio: Executa somente na primeira vez
Condição: V: executa e volta / F: pula fora
Incremento: Executa toda vez depois de voltar

for ( início ; condição ; incremento) {
comando 1
comando 2
}

(for while - Sintaxe)

do {
comando 1
comando 2
} while ( condição );


***OUTROS TÓPICOS BÁSICOS***

Restrições para nomes de variáveis
• Não pode começar com dígito: use uma letra ou _
• Não usar acentos ou til
• Não pode ter espaço em branco
• Sugestão: use nomes que tenham um significado

***CONVENÇÕES***

• Camel Case: lastName
• pacotes
• atributos
• métodos
• variáveis e parâmetros

• Pascal Case: ProductService
    • classes

***FUNÇÕES INTERESSANTES PARA STRING***

Checklist
• Formatar: toLowerCase(), toUpperCase(), trim()
• Recortar: substring(inicio), substring(inicio, fim)
• Substituir: Replace(char, char), Replace(string, string)
• Buscar: IndexOf, LastIndexOf
• str.Split(" ")

***FUNÇÕES2***
Representam um processamento que possui um significado
    • Math.sqrt(double)
    • System.out.println(string)
• Principais vantagens: modularização, delegação e reaproveitamento
• Dados de entrada e saída
    • Funções podem receber dados de entrada (parâmetros ou argumentos)
    • Funções podem ou não retornar uma saída
• Em orientação a objetos, funções em classes recebem o nome de
    "métodos"